#
# Copyright Â© 2016-2020 The Thingsboard Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: thingsboard
spec:
  serviceName: "zookeeper"
  replicas: 3
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          imagePullPolicy: Always
          image: zookeeper:3.5
          ports:
            - containerPort: 2181
              name: client
            - containerPort: 2888
              name: server
            - containerPort: 3888
              name: election
          readinessProbe:
            periodSeconds: 60
            tcpSocket:
              port: 2181
          livenessProbe:
            periodSeconds: 60
            tcpSocket:
              port: 2181
          env:
            - name: ZOO_SERVERS
              value: "server.0=zookeeper-0.zookeeper:2888:3888;2181 server.1=zookeeper-1.zookeeper:2888:3888;2181 server.2=zookeeper-2.zookeeper:2888:3888;2181"
            - name: JVMFLAGS
              value: "-Dzookeeper.electionPortBindRetry=0"
          volumeMounts:
            - name: data
              mountPath: /data
              readOnly: false
      initContainers:
        - command:
            - /bin/bash
            - -c
            - |-
              set -ex;
              mkdir -p "$ZOO_DATA_LOG_DIR" "$ZOO_DATA_DIR" "$ZOO_CONF_DIR";
              chown "$ZOO_USER:$ZOO_USER" "$ZOO_DATA_LOG_DIR" "$ZOO_DATA_DIR" "$ZOO_CONF_DIR"
              if [[ ! -f "$ZOO_DATA_DIR/myid" ]]; then
                echo $HOSTNAME| rev | cut -d "-" -f1 | rev > "$ZOO_DATA_DIR/myid"
              fi
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          image: zookeeper:3.5
          imagePullPolicy: IfNotPresent
          name: zookeeper-init
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /data
              readOnly: false
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: thingsboard
spec:
  type: ClusterIP
  ports:
    - port: 2181
      targetPort: 2181
      name: client
    - port: 2888
      targetPort: 2888
      name: server
    - port: 3888
      targetPort: 3888
      name: election
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tb-kafka
  namespace: thingsboard
spec:
  serviceName: "tb-kafka"
  replicas: 3
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: tb-kafka
  template:
    metadata:
      labels:
        app: tb-kafka
    spec:
      containers:
        - name: tb-kafka
          imagePullPolicy: Always
          image: wurstmeister/kafka:2.12-2.2.1
          ports:
            - containerPort: 9092
              name: kafka-int
            - containerPort: 9093
              name: kafka-ext
          readinessProbe:
            periodSeconds: 5
            timeoutSeconds: 5
            tcpSocket:
              port: 9092
            initialDelaySeconds: 60
          livenessProbe:
            timeoutSeconds: 5
            periodSeconds: 5
            tcpSocket:
              port: 9092
            initialDelaySeconds: 80
          env:
            - name: BROKER_ID_COMMAND
              value: "hostname | cut -d'-' -f3"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "60000"
            - name: KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE
              value: "true"
            - name: KAFKA_LISTENERS
              value: "INSIDE://:9092,OUTSIDE://:9093"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INSIDE://:9092,OUTSIDE://:9093"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INSIDE"
            - name: KAFKA_CONTROLLER_SHUTDOWN_ENABLE
              value: "true"
            - name: KAFKA_CREATE_TOPICS
              value: "js.eval.requests:100:1:delete --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600,tb.transport.api.requests:30:1:delete --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600,tb.rule-engine:30:1:delete --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "false"
            - name: KAFKA_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_LOG_SEGMENT_BYTES
              value: "268435456"
            - name: KAFKA_LOG_RETENTION_MS
              value: "300000"
            - name: KAFKA_LOG_CLEANUP_POLICY
              value: "delete"
            - name: KAFKA_PORT
              value: "9092"
            - name: KAFKA_LOG_DIRS
              value: "/kafka-logs"
          volumeMounts:
            - name: logs
              mountPath: /kafka-logs
              subPath: logs
  volumeClaimTemplates:
    - metadata:
        name: logs
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: tb-kafka
  namespace: thingsboard
spec:
  type: ClusterIP
  ports:
    - port: 9092
      targetPort: 9092
      name: kafka-int
    - port: 9093
      targetPort: 9093
      name: kafka-ext
  selector:
    app: tb-kafka
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tb-redis
  namespace: thingsboard
data:
  update-node.sh: |
    #!/bin/sh
    REDIS_NODES="/data/nodes.conf"
    sed -i -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${REDIS_NODES}
    exec "$@"
  redis.conf: |+
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    appendonly yes
    protected-mode no
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tb-redis
  namespace: thingsboard
spec:
  serviceName: server
  replicas: 6
  selector:
    matchLabels:
      app: tb-redis
  template:
    metadata:
      labels:
        app: tb-redis
    spec:
      containers:
        - name: redis
          image: redis:5.0.1-alpine
          ports:
            - containerPort: 6379
              name: client
            - containerPort: 16379
              name: gossip
          command: ["/conf/update-node.sh", "redis-server", "/conf/redis.conf"]
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - name: conf
              mountPath: /conf
              readOnly: false
            - name: data
              mountPath: /data
              readOnly: false
      volumes:
        - name: conf
          configMap:
            name: tb-redis
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: tb-redis
  namespace: thingsboard
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      name: client
    - port: 16379
      targetPort: 16379
      name: gossip
  selector:
    app: tb-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-js-executor
  namespace: thingsboard
spec:
  replicas: 20
  selector:
    matchLabels:
      app: tb-js-executor
  template:
    metadata:
      labels:
        app: tb-js-executor
    spec:
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-js-executor:latest
        env:
        - name: REMOTE_JS_EVAL_REQUEST_TOPIC
          value: "js.eval.requests"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        - name: LOGGER_LEVEL
          value: "info"
        - name: LOG_FOLDER
          value: "logs"
        - name: LOGGER_FILENAME
          value: "tb-js-executor-%DATE%.log"
        - name: DOCKER_MODE
          value: "true"
        - name: SCRIPT_BODY_TRACE_FREQUENCY
          value: "1000"
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-node
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-node
  template:
    metadata:
      labels:
        app: tb-node
    spec:
      volumes:
        - name: tb-node-config
          configMap:
            name: tb-node-config
            items:
            - key: conf
              path:  thingsboard.conf
            - key: logback
              path:  logback.xml
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-node:latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9001
          name: rpc
        env:
        - name: TB_SERVICE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TB_SERVICE_TYPE
          value: "monolith"
        - name: ZOOKEEPER_ENABLED
          value: "true"
        - name: ZOOKEEPER_URL
          value: "zookeeper:2181"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        - name: JS_EVALUATOR
          value: "remote"
        - name: TRANSPORT_TYPE
          value: "remote"
        - name: CACHE_TYPE
          value: "redis"
        - name: REDIS_HOST
          value: "tb-redis"
        - name: REDIS_CONNECTION_TYPE
          value: "cluster"
        - name: REDIS_NODES
          value: "tb-redis:6379"
        - name: HTTP_LOG_CONTROLLER_ERROR_STACK_TRACE
          value: "false"
        envFrom:
        - configMapRef:
            name: tb-node-db-config
        volumeMounts:
          - mountPath: /config
            name: tb-node-config
        livenessProbe:
          httpGet:
            path: /login
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 10
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-node
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-node
  ports:
  - port: 8080
    name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-mqtt-transport
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-mqtt-transport
  template:
    metadata:
      labels:
        app: tb-mqtt-transport
    spec:
      volumes:
        - name: tb-mqtt-transport-config
          configMap:
            name: tb-mqtt-transport-config
            items:
            - key: conf
              path:  tb-mqtt-transport.conf
            - key: logback
              path:  logback.xml
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-mqtt-transport:latest
        ports:
        - containerPort: 1883
          name: mqtt
        env:
        - name: TB_SERVICE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TB_SERVICE_TYPE
          value: "monolith"
        - name: MQTT_BIND_ADDRESS
          value: "0.0.0.0"
        - name: MQTT_BIND_PORT
          value: "1883"
        - name: MQTT_TIMEOUT
          value: "10000"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        volumeMounts:
          - mountPath: /config
            name: tb-mqtt-transport-config
        readinessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 1883
        livenessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 1883
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-mqtt-transport
  namespace: thingsboard
spec:
  type: LoadBalancer
  selector:
    app: tb-mqtt-transport
  ports:
  - port: 1883
    targetPort: 1883
    name: mqtt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-http-transport
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-http-transport
  template:
    metadata:
      labels:
        app: tb-http-transport
    spec:
      volumes:
        - name: tb-http-transport-config
          configMap:
            name: tb-http-transport-config
            items:
            - key: conf
              path:  tb-http-transport.conf
            - key: logback
              path:  logback.xml
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-http-transport:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: TB_SERVICE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TB_SERVICE_TYPE
          value: "monolith"
        - name: HTTP_BIND_ADDRESS
          value: "0.0.0.0"
        - name: HTTP_BIND_PORT
          value: "8080"
        - name: HTTP_REQUEST_TIMEOUT
          value: "60000"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        volumeMounts:
          - mountPath: /config
            name: tb-http-transport-config
        readinessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 8080
        livenessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-http-transport
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-http-transport
  ports:
  - port: 8080
    name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-coap-transport
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-coap-transport
  template:
    metadata:
      labels:
        app: tb-coap-transport
    spec:
      volumes:
        - name: tb-coap-transport-config
          configMap:
            name: tb-coap-transport-config
            items:
            - key: conf
              path:  tb-coap-transport.conf
            - key: logback
              path:  logback.xml
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-coap-transport:latest
        ports:
        - containerPort: 5683
          name: coap
          protocol: UDP
        env:
        - name: TB_SERVICE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TB_SERVICE_TYPE
          value: "monolith"
        - name: COAP_BIND_ADDRESS
          value: "0.0.0.0"
        - name: COAP_BIND_PORT
          value: "5683"
        - name: COAP_TIMEOUT
          value: "10000"
        - name: TB_KAFKA_SERVERS
          value: "tb-kafka:9092"
        volumeMounts:
          - mountPath: /config
            name: tb-coap-transport-config
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-coap-transport
  namespace: thingsboard
spec:
  type: LoadBalancer
  selector:
    app: tb-coap-transport
  ports:
  - port: 5683
    name: coap
    protocol: UDP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-web-ui
  namespace: thingsboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tb-web-ui
  template:
    metadata:
      labels:
        app: tb-web-ui
    spec:
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-web-ui:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: HTTP_BIND_ADDRESS
          value: "0.0.0.0"
        - name: HTTP_BIND_PORT
          value: "8080"
        - name: TB_ENABLE_PROXY
          value: "false"
        - name: LOGGER_LEVEL
          value: "info"
        - name: LOG_FOLDER
          value: "logs"
        - name: LOGGER_FILENAME
          value: "tb-web-ui-%DATE%.log"
        - name: DOCKER_MODE
          value: "true"
        livenessProbe:
          httpGet:
            path: /index.html
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 10
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-web-ui
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-web-ui
  ports:
  - port: 8080
    name: http
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: tb-ingress
  namespace: thingsboard
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
spec:
  rules:
  - http:
      paths:
      - path: /api/v1/.*
        backend:
          serviceName: tb-http-transport
          servicePort: 8080
      - path: /static/rulenode/.*
        backend:
          serviceName: tb-node
          servicePort: 8080
      - path: /static/.*
        backend:
          serviceName: tb-web-ui
          servicePort: 8080
      - path: /index.html.*
        backend:
          serviceName: tb-web-ui
          servicePort: 8080
      - path: /
        backend:
          serviceName: tb-web-ui
          servicePort: 8080
      - path: /.*
        backend:
          serviceName: tb-node
          servicePort: 8080
---