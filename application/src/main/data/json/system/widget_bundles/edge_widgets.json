{
  "widgetsBundle": {
    "alias": "edges_widgets",
    "title": "Edge widgets",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "edges_overview",
      "name": "Edges Quick Overview",
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 5,
        "resources": [],
        "templateHtml": "<tb-edges-overview-widget \n    [ctx]=\"ctx\">\n</tb-edges-overview-widget>",
        "templateCss": "",
        "controllerScript": "self.onInit = function() {\n}\n\nself.onDataUpdated = function() {\n    self.ctx.$scope.edgesOverviewWidget.onDataUpdated();\n}\n\nself.typeParameters = function() {\n    return {\n        dataKeysOptional: true\n    };\n}\n\nself.actionSources = function() {\n    return {\n        'nodeSelected': {\n            name: 'widget-action.node-selected',\n            multiple: false\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EdgesOverviewSettings\",\n        \"properties\": {\n            \"nodeRelationQueryFunction\": {\n                \"title\": \"Node relations query function: f(nodeCtx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"nodeHasChildrenFunction\": {\n                \"title\": \"Node has children function: f(nodeCtx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"nodeOpenedFunction\": {\n                \"title\": \"Default node opened function: f(nodeCtx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"nodeDisabledFunction\": {\n                \"title\": \"Node disabled function: f(nodeCtx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"nodeIconFunction\": {\n                \"title\": \"Node icon function: f(nodeCtx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"nodeTextFunction\": {\n                \"title\": \"Node text function: f(nodeCtx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"nodesSortFunction\": {\n                \"title\": \"Nodes sort function: f(nodeCtx1, nodeCtx2)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        {\n            \"key\": \"nodeRelationQueryFunction\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"nodeHasChildrenFunction\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"nodeOpenedFunction\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"nodeDisabledFunction\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"nodeIconFunction\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"nodeTextFunction\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"key\": \"nodesSortFunction\",\n            \"type\": \"javascript\"\n        }\n    ]\n}",
        "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {},\n        \"required\": []\n    },\n    \"form\": []\n}",
        "defaultConfig": "{\"timewindow\":{\"realtime\":{\"interval\":1000,\"timewindowMs\":86400000},\"aggregation\":{\"type\":\"NONE\",\"limit\":200}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"4px\",\"settings\":{\"nodeRelationQueryFunction\":\"/**\\n\\n// Function should return relations query object for current node used to fetch entity children.\\n// Function can return 'default' string value. In this case default relations query will be used.\\n\\n// The following example code will construct simple relations query that will fetch relations of type 'Contains'\\n// from the current entity.\\n\\nvar entity = nodeCtx.entity;\\nvar query = {\\n    parameters: {\\n        rootId: entity.id.id,\\n        rootType: entity.id.entityType,\\n        direction: \\\"FROM\\\",\\n        maxLevel: 1\\n    },\\n    filters: [{\\n        relationType: \\\"Contains\\\",\\n        entityTypes: []\\n    }]\\n};\\nreturn query;\\n\\n**/\\n\",\"nodeHasChildrenFunction\":\"/**\\n\\n// Function should return boolean value indicating whether current node has children (whether it can be expanded).\\n\\n// The following example code will restrict entities hierarchy expansion up to third level.\\n\\nreturn nodeCtx.level <= 2;\\n\\n// The next example code will restrict entities expansion according to the value of example 'nodeHasChildren' attribute.\\n\\nvar data = nodeCtx.data;\\nif (data.hasOwnProperty('nodeHasChildren') && data['nodeHasChildren'] !== null) {\\n    return data['nodeHasChildren'] === 'true';\\n} else {\\n    return true;\\n}\\n  \\n**/\\n \",\"nodeTextFunction\":\"/**\\n\\n// Function should return text (can be HTML code) for the current node.\\n\\n// The following example code will generate node text consisting of entity name and temperature if temperature value is present in entity attributes/timeseries.\\n\\nvar data =  nodeCtx.data;\\nvar entity = nodeCtx.entity;\\nvar text = entity.name;\\nif (data.hasOwnProperty('temperature') && data['temperature'] !== null) {\\n    text += \\\" <b>\\\"+ data['temperature'] +\\\" Â°C</b>\\\";\\n}\\nreturn text;\\n\\n**/\",\"nodeIconFunction\":\"/** \\n\\n// Function should return node icon info object.\\n// Resulting object should contain either 'materialIcon' or 'iconUrl' property. \\n// Where:\\n    - 'materialIcon' - name of the material icon to be used from the Material Icons Library (https://material.io/tools/icons);\\n    - 'iconUrl' - url of the external image to be used as node icon.\\n// Function can return 'default' string value. In this case default icons according to entity type will be used.\\n\\n// The following example code shows how to use external image for devices which name starts with 'Test' and use \\n// default icons for the rest of entities.\\n\\nvar entity = nodeCtx.entity;\\nif (entity.id.entityType === 'DEVICE' && entity.name.startsWith('Test')) {\\n    return {iconUrl: 'https://avatars1.githubusercontent.com/u/14793288?v=4&s=117'};\\n} else {\\n    return 'default';\\n}\\n \\n**/\",\"nodeDisabledFunction\":\"/**\\n\\n// Function should return boolean value indicating whether current node should be disabled (not selectable).\\n\\n// The following example code will disable current node according to the value of example 'nodeDisabled' attribute.\\n\\nvar data = nodeCtx.data;\\nif (data.hasOwnProperty('nodeDisabled') && data['nodeDisabled'] !== null) {\\n    return data['nodeDisabled'] === 'true';\\n} else {\\n    return false;\\n}\\n  \\n**/\\n\",\"nodesSortFunction\":\"/**\\n\\n// This function is used to sort nodes of the same level. Function should compare two nodes and return \\n// integer value: \\n//     - less than 0 - sort nodeCtx1 to an index lower than nodeCtx2\\n//     - 0 - leave nodeCtx1 and nodeCtx2 unchanged with respect to each other\\n//     - greater than 0 - sort nodeCtx2 to an index lower than nodeCtx1\\n\\n// The following example code will sort entities first by entity type in alphabetical order then\\n// by entity name in alphabetical order.\\n\\nvar result = nodeCtx1.entity.id.entityType.localeCompare(nodeCtx2.entity.id.entityType);\\nif (result === 0) {\\n    result = nodeCtx1.entity.name.localeCompare(nodeCtx2.entity.name);\\n}\\nreturn result;\\n  \\n**/\",\"nodeOpenedFunction\":\"/**\\n\\n// Function should return boolean value indicating whether current node should be opened (expanded) when it first loaded.\\n\\n// The following example code will open by default nodes up to third level.\\n\\nreturn nodeCtx.level <= 2;\\n\\n**/\\n \"},\"title\":\"Edge Quick Overview Widget\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400,\"padding\":\"5px 10px 5px 10px\"},\"useDashboardTimewindow\":false,\"showLegend\":false,\"datasources\":[{\"type\":\"function\",\"name\":\"Simulated\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{\"columnWidth\":\"0px\",\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\"},\"_hash\":0.472295003170325,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos\",\"color\":\"#4caf50\",\"settings\":{\"columnWidth\":\"0px\",\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\"},\"_hash\":0.8926244886945558,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#f44336\",\"settings\":{\"columnWidth\":\"0px\",\"useCellStyleFunction\":false,\"cellStyleFunction\":\"\",\"useCellContentFunction\":false,\"cellContentFunction\":\"\"},\"_hash\":0.6401141393938932,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"widgetStyle\":{},\"actions\":{}}"
      }
    }
  ]
}