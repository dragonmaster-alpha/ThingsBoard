/**
 * Copyright Â© 2016-2018 The Thingsboard Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package cluster;

option java_package = "org.thingsboard.server.gen.cluster";
option java_outer_classname = "ClusterAPIProtos";

//message Uid {
//  sint64 pluginUuidMsb = 1;
//  sint64 pluginUuidLsb = 2;
//}
//
//message PluginAddress {
//  Uid pluginId = 1;
//  Uid tenantId = 2;
//}
//
//message ToPluginRpcMessage {
//  PluginAddress address = 1;
//  int32 clazz = 2;
//  bytes data = 3;
//}
//
//message ToDeviceActorRpcMessage {
//  bytes data = 1;
//}
//
//message ToDeviceSessionActorRpcMessage {
//  bytes data = 1;
//}
//
//message ToDeviceActorNotificationRpcMessage {
//  bytes data = 1;
//}
//
//message ToAllNodesRpcMessage {
//  bytes data = 1;
//}
//
//message ConnectRpcMessage {
//  ServerAddress serverAddress = 1;
//}
//
//message ToDeviceRpcRequestRpcMessage {
//  Uid deviceTenantId = 2;
//  Uid deviceId = 3;
//
//  Uid msgId = 4;
//  bool oneway = 5;
//  int64 expTime = 6;
//  string method = 7;
//  string params = 8;
//}
//
//message ToPluginRpcResponseRpcMessage {
//  Uid msgId = 2;
//  string response = 3;
//  string error = 4;
//}
//
//message ToRpcServerMessage {
//  ConnectRpcMessage connectMsg = 1;
//  ToPluginRpcMessage toPluginRpcMsg = 2;
//  ToDeviceActorRpcMessage toDeviceActorRpcMsg = 3;
//  ToDeviceSessionActorRpcMessage toDeviceSessionActorRpcMsg = 4;
//  ToDeviceActorNotificationRpcMessage toDeviceActorNotificationRpcMsg = 5;
//  ToAllNodesRpcMessage toAllNodesRpcMsg = 6;
//  ToDeviceRpcRequestRpcMessage toDeviceRpcRequestRpcMsg = 7;
//  ToPluginRpcResponseRpcMessage toPluginRpcResponseRpcMsg = 8;
//}

service ClusterRpcService {
  rpc handleMsgs(stream ClusterMessage) returns (stream ClusterMessage) {}
}
message ClusterMessage {
  MessageType messageType = 1;
  MessageMataInfo messageMetaInfo = 2;
  ServerAddress serverAdresss = 3;
  bytes payload = 4;
}

message ServerAddress {
  string host = 1;
  int32 port = 2;
}

message MessageMataInfo {
  string payloadMetaInfo = 1;
  repeated string tags = 2;
}


enum MessageType {

  //Cluster control messages
  RPC_SESSION_CREATE_REQUEST_MSG = 0;
  TO_ALL_NODES_MSG = 1;
  RPC_SESSION_TELL_MSG = 2;
  RPC_BROADCAST_MSG = 3;
  CONNECT_RPC_MESSAGE =4;

  //CLUSTER_DATA_MESSAGE
  CLUSTER_NETWORK_SERVER_DATA_MESSAGE = 5;
}
